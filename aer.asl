/*
    AER: Memories Of Old
    Version: 0.1.3
    Author: NoTeefy
    Compatible Versions:
        Standalone (PC) || W10 (functional)
        GOG (PC) || W10 (functional)
        Epic Store (PC) || W10 (functional)
    Load remover which takes into account the actual loading flags used by the developers
    
    CREDITS: Some code may be inspired by some referenced scripts and their authors: Avasam, DevilSquirrel, tduva, Darkid
*/
state("AER") {}
/*
    startup{} runs when the script gets loaded
*/
startup {
    refreshRate = 1000/500; // cycle every 0.5 seconds

    // init version and debug flag
    vars.ver = "0.1.3";
    var debugEnabled = false;

    // global variables
    vars.watchers = new MemoryWatcherList();
    vars.cts = new CancellationTokenSource();

    vars.resetGlobals = (Action) (() => {
        vars.watchers = new MemoryWatcherList();
        vars.cts = new CancellationTokenSource();
    });

    /*
        For the brave souls who think about copying this inline action: You'll be damned by the god's of programming...
        If you still insinst on implementing it, make sure to be aware of the things it can cause:
            - your pc might explode
            - it might summon an AI which will then destroy all of humankind
            - you might fall into deep depressions
            - you might want to code in ABAP and Pascal voluntarily
    */
    vars.playCustomBleep = (Action) (() => {
        using(var soundStream = new System.IO.MemoryStream(Convert.FromBase64String(""))) {
            using(var soundStreamDecomp = new System.IO.MemoryStream()) {
                using(var decompStream = new System.IO.Compression.GZipStream(soundStream, System.IO.Compression.CompressionMode.Decompress)) {
                    decompStream.CopyTo(soundStreamDecomp);
                    using(var finalStream = new System.IO.MemoryStream(soundStreamDecomp.ToArray())) {
                        var player = new System.Media.SoundPlayer(finalStream);
                        player.PlaySync();
                    }
                }
            }
        }
    });

    /*
        Function dbgOut()
        Prints the passed text. You can use DebugView.exe from Microsoft to check the output. It only works if the debugEnabled flag has been set to true.

        Params: [string] text, that is getting printed out
        Return: void / nothing
    */
    vars.dbgOut = (Action<string>) ((text) => {
        if (debugEnabled) {
            print(" «[AER - v" + vars.ver + "]» " + text);
        }
    });
    
    /*
        Function showInfo()
        Shows the passed text in a informational modal (pop-up)
        
        Params: [string] text to show, [string] modal title
        Return: void / nothing
        
    */
    vars.showInfo = (Action<string, string>) ((input, title) => {
        MessageBox.Show(input, "«[AER - v" + vars.ver + "]» Information - " + title, MessageBoxButtons.OK, MessageBoxIcon.Asterisk); 
    });

    vars.init = (Action<ProcessModuleWow64Safe[], Process>) ((mods, proc) => {
        var dll = mods.Single(x => String.Equals(x.ModuleName, "mono.dll", StringComparison.OrdinalIgnoreCase));
        vars.dbgOut("init{} - got " + dll.ModuleName + " at base: " + dll.BaseAddress.ToString("X"));

        // Teleporter.Static
        DeepPointer dpTeleporter = new DeepPointer(dll.ModuleName, 0x1F6964, new int[]{ 0x30, 0xD5C, 0xE90 });
        IntPtr resolvedTeleporter = IntPtr.Zero;
        dpTeleporter.DerefOffsets(proc, out resolvedTeleporter);
        if(resolvedTeleporter == IntPtr.Zero) {
            throw new Exception("dpTeleporter is wrongly initialized");
        }
        vars.dbgOut("init{} - got dpTeleporter at base: " + resolvedTeleporter.ToString("X2"));
        vars.watchers.Add(new MemoryWatcher<bool>(resolvedTeleporter + 0x5A) { Name = "Teleporter.isLoading", FailAction = MemoryWatcher.ReadFailAction.SetZeroOrNull });
        vars.watchers.Add(new MemoryWatcher<bool>(resolvedTeleporter + 0x59) { Name = "Teleporter.isTransitioning", FailAction = MemoryWatcher.ReadFailAction.SetZeroOrNull });

        // LoadingScreen.Static
        vars.watchers.Add(new MemoryWatcher<bool>(IntPtr.Zero) { Name = "LoadingScreen.isLoading", FailAction = MemoryWatcher.ReadFailAction.SetZeroOrNull }); // init watcher to prevent errors if something already checks for it
        new System.Threading.Tasks.Task(
            (Action)(async () => {
                try {
                    do {
                        DeepPointer dPLoadingScreen = new DeepPointer(dll.ModuleName, 0x1F696C, new int[]{ 0x80, 0x90, 0x40, 0x1C, 0x4, 0xC, 0x0 });
                        IntPtr resolvedLoadingScreen = IntPtr.Zero;
                        dPLoadingScreen.DerefOffsets(proc, out resolvedLoadingScreen);
                        if(resolvedLoadingScreen != IntPtr.Zero) {
                            vars.dbgOut("vars.init{} - got dpLoadingScreen at base: " + resolvedLoadingScreen.ToString("X2"));
                            vars.watchers.Remove(vars.watchers["LoadingScreen.isLoading"]);
                            vars.watchers.Add(new MemoryWatcher<bool>(resolvedLoadingScreen + 0x4) { Name = "LoadingScreen.isLoading", FailAction = MemoryWatcher.ReadFailAction.SetZeroOrNull });
                            vars.playCustomBleep();
                            break;
                        }
                        await System.Threading.Tasks.Task.Delay(1000, vars.cts.Token).ConfigureAwait(true);
                    } while(vars.cts.Token.IsCancellationRequested == false);
                } catch (Exception ex) {
                    vars.dbgOut("vars.init{} - got an exception: " + ex.ToString());
                }
            })
        ).Start();
    });

    // show new splitter information
    vars.showInfo("Hi there.\n\n\nThe author of the autosplitter that you're currently using here o/\n\nI just wanted to inform you, that you're using a new version which should have broader support for all release platforms (Steam, GOG, Epic Store).\nI've also integrated additional loading flags used by the engine. One of those flags only gets created once you're on the loading screen (for the first time after starting the game). Once the splitter has loaded all flags, it will notify you through a short chime.\nYou don't need to load into a game when going for a run after starting AER as the other flags compensate for it during the first loading screen.\nPlease make sure to report any bugs that you may experience on our Discord. \nGL for your runs and may the speed be with you! :)\n\n\nKind regards, NoTeefy", "New Autosplitter version");
}
/*
    shutdown{} runs when the script gets unloaded (disabling autosplitter, closing LiveSplit, changing splits)
*/
shutdown {
    vars.cts.Cancel();
    vars.resetGlobals();
}
/*
    init{} runs if the given process has been found (can occur multiple times during a session; if you reopen the game as an example)
*/
init {
    refreshRate = 1000/500; // cycle every 0.5 seconds
    if(game.Handle == null) {
        throw new Exception("handle invalid");
    }
    vars.dbgOut("init{} - attached autosplitter to game client");

	// reset globals
    vars.resetGlobals();

    vars.init(modules, game);
    refreshRate = 1000/17; // 58 times a second
}
/*
    exit{} runs when the attached process exits/dies
*/
exit {
    vars.cts.Cancel();
    vars.resetGlobals();
}
/*
    update{} always runs
    return false => prevents isLoading{}, gameTime{}, reset{}
*/
update {
    // update memory fields
    vars.watchers.UpdateAll(game);
    foreach(MemoryWatcher watcher in vars.watchers) {
        if(watcher.Changed) {
            vars.dbgOut("update{} - " + watcher.Name + " switched from " + watcher.Old + " to: " + watcher.Current);
        }
    }
}
/*
    isLoading{} only runs when the timer's active (will be skipped if update{}'s returning false)
    return true => pauses the GameTime-Timer till the next tick
*/
isLoading {
    return (vars.watchers["Teleporter.isLoading"].Current.Equals(true) || vars.watchers["LoadingScreen.isLoading"].Current.Equals(true) || vars.watchers["Teleporter.isTransitioning"].Current.Equals(true));
}
